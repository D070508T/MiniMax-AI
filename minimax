public static int minimax(char[][] board, boolean isMaximizing) {
        miniMaxCalls++;
        totalCalculations++;
        if (getWinner(board) == 'X') {
            return 1;
        } else if (getWinner(board) == 'O') {
            return -1;
        } else if (isTie(board)) {
            return 0;
        }

        ArrayList<int[]> moves = getAvailableMoves(board);
        int bestScore;

        if (isMaximizing) {
            bestScore = Integer.MIN_VALUE;
            for (int[] move : moves) {
                board[move[0]][move[1]] = 'X';
                int score = minimax(board, false);

                resetMove(board, move);

                bestScore = Math.max(bestScore, score);
            }
        } else {
            bestScore = Integer.MAX_VALUE;
            for (int[] move : moves) {
                board[move[0]][move[1]] = 'O';
                int score = minimax(board, true);

                resetMove(board, move);

                bestScore = Math.min(bestScore, score);
            }
        }

        return bestScore;
    }

    public static void resetMove(char[][] board, int[] move) {
            int digit;
            if (move[0] == 0) {
                digit = move[1] + 1;
            } else if (move[0] == 1) {
                digit = move[1] + 4;
            } else {
                digit = move[1] + 7;
            }

            board[move[0]][move[1]] = Character.forDigit(digit, 10);
        }

    public static int[] getBestMove(char[][] board) {
        miniMaxCalls = 0;
        int bestScore = Integer.MIN_VALUE;
        int[] bestMove = null;

        for (int[] move : getAvailableMoves(board)) {
            board[move[0]][move[1]] = 'X';
            int score = minimax(board, false);

            resetMove(board, move);

            if (score > bestScore) {
                bestScore = score;
                bestMove = move;
            }
        }

        System.out.println("Calculations made: " + miniMaxCalls);
        return bestMove;
    }

    public static ArrayList<int[]> getAvailableMoves(char[][] board) {
        ArrayList<int[]> list = new ArrayList<>();

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] != 'O' && board[i][j] != 'X') {
                    list.add(new int[]{i, j});
                }
            }
        }

        return list;
    }